// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "backsub_hls_fptoui_float_i8.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic backsub_hls_fptoui_float_i8::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> backsub_hls_fptoui_float_i8::ap_const_lv32_17 = "10111";
const sc_lv<32> backsub_hls_fptoui_float_i8::ap_const_lv32_1E = "11110";
const sc_lv<1> backsub_hls_fptoui_float_i8::ap_const_lv1_1 = "1";
const sc_lv<9> backsub_hls_fptoui_float_i8::ap_const_lv9_181 = "110000001";
const sc_lv<32> backsub_hls_fptoui_float_i8::ap_const_lv32_8 = "1000";
const sc_lv<8> backsub_hls_fptoui_float_i8::ap_const_lv8_7F = "1111111";
const sc_logic backsub_hls_fptoui_float_i8::ap_const_logic_0 = sc_dt::Log_0;

backsub_hls_fptoui_float_i8::backsub_hls_fptoui_float_i8(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_return);
    sensitive << ( isNeg_reg_149 );
    sensitive << ( ap_ce );
    sensitive << ( tmp_17_reg_159 );
    sensitive << ( tmp_fu_140_p1 );

    SC_METHOD(thread_isNeg_fu_72_p3);
    sensitive << ( sh_assign_fu_66_p2 );

    SC_METHOD(thread_loc_V_1_fu_46_p1);
    sensitive << ( p_Val2_s_fu_32_p1 );

    SC_METHOD(thread_loc_V_fu_36_p4);
    sensitive << ( p_Val2_s_fu_32_p1 );

    SC_METHOD(thread_p_Result_s_fu_50_p3);
    sensitive << ( loc_V_1_fu_46_p1 );

    SC_METHOD(thread_p_Val2_s_fu_32_p1);
    sensitive << ( x );

    SC_METHOD(thread_sh_assign_1_cast_cast_fu_102_p1);
    sensitive << ( sh_assign_1_fu_90_p3 );

    SC_METHOD(thread_sh_assign_1_cast_fu_98_p1);
    sensitive << ( sh_assign_1_fu_90_p3 );

    SC_METHOD(thread_sh_assign_1_fu_90_p3);
    sensitive << ( isNeg_fu_72_p3 );
    sensitive << ( sh_assign_fu_66_p2 );
    sensitive << ( tmp_i_cast_fu_86_p1 );

    SC_METHOD(thread_sh_assign_fu_66_p2);
    sensitive << ( tmp_i_i_cast1_fu_62_p1 );

    SC_METHOD(thread_tmp_1_i_fu_106_p1);
    sensitive << ( sh_assign_1_cast_fu_98_p1 );

    SC_METHOD(thread_tmp_2_i_fu_110_p2);
    sensitive << ( p_Result_s_fu_50_p3 );
    sensitive << ( sh_assign_1_cast_cast_fu_102_p1 );

    SC_METHOD(thread_tmp_4_i_fu_116_p2);
    sensitive << ( tmp_8_i_fu_58_p1 );
    sensitive << ( tmp_1_i_fu_106_p1 );

    SC_METHOD(thread_tmp_8_i_fu_58_p1);
    sensitive << ( p_Result_s_fu_50_p3 );

    SC_METHOD(thread_tmp_fu_140_p1);
    sensitive << ( tmp_109_reg_154 );

    SC_METHOD(thread_tmp_i_cast_fu_86_p1);
    sensitive << ( tmp_i_fu_80_p2 );

    SC_METHOD(thread_tmp_i_fu_80_p2);
    sensitive << ( loc_V_fu_36_p4 );

    SC_METHOD(thread_tmp_i_i_cast1_fu_62_p1);
    sensitive << ( loc_V_fu_36_p4 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "backsub_hls_fptoui_float_i8_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, isNeg_fu_72_p3, "isNeg_fu_72_p3");
    sc_trace(mVcdFile, isNeg_reg_149, "isNeg_reg_149");
    sc_trace(mVcdFile, tmp_109_reg_154, "tmp_109_reg_154");
    sc_trace(mVcdFile, tmp_17_reg_159, "tmp_17_reg_159");
    sc_trace(mVcdFile, p_Val2_s_fu_32_p1, "p_Val2_s_fu_32_p1");
    sc_trace(mVcdFile, loc_V_1_fu_46_p1, "loc_V_1_fu_46_p1");
    sc_trace(mVcdFile, p_Result_s_fu_50_p3, "p_Result_s_fu_50_p3");
    sc_trace(mVcdFile, loc_V_fu_36_p4, "loc_V_fu_36_p4");
    sc_trace(mVcdFile, tmp_i_i_cast1_fu_62_p1, "tmp_i_i_cast1_fu_62_p1");
    sc_trace(mVcdFile, sh_assign_fu_66_p2, "sh_assign_fu_66_p2");
    sc_trace(mVcdFile, tmp_i_fu_80_p2, "tmp_i_fu_80_p2");
    sc_trace(mVcdFile, tmp_i_cast_fu_86_p1, "tmp_i_cast_fu_86_p1");
    sc_trace(mVcdFile, sh_assign_1_fu_90_p3, "sh_assign_1_fu_90_p3");
    sc_trace(mVcdFile, sh_assign_1_cast_fu_98_p1, "sh_assign_1_cast_fu_98_p1");
    sc_trace(mVcdFile, sh_assign_1_cast_cast_fu_102_p1, "sh_assign_1_cast_cast_fu_102_p1");
    sc_trace(mVcdFile, tmp_8_i_fu_58_p1, "tmp_8_i_fu_58_p1");
    sc_trace(mVcdFile, tmp_1_i_fu_106_p1, "tmp_1_i_fu_106_p1");
    sc_trace(mVcdFile, tmp_2_i_fu_110_p2, "tmp_2_i_fu_110_p2");
    sc_trace(mVcdFile, tmp_4_i_fu_116_p2, "tmp_4_i_fu_116_p2");
    sc_trace(mVcdFile, tmp_fu_140_p1, "tmp_fu_140_p1");
#endif

    }
}

backsub_hls_fptoui_float_i8::~backsub_hls_fptoui_float_i8() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void backsub_hls_fptoui_float_i8::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
        isNeg_reg_149 = sh_assign_fu_66_p2.read().range(8, 8);
        tmp_109_reg_154 = tmp_2_i_fu_110_p2.read().range(23, 23);
        tmp_17_reg_159 = tmp_4_i_fu_116_p2.read().range(30, 23);
    }
}

void backsub_hls_fptoui_float_i8::thread_ap_return() {
    ap_return = (!isNeg_reg_149.read()[0].is_01())? sc_lv<8>(): ((isNeg_reg_149.read()[0].to_bool())? tmp_fu_140_p1.read(): tmp_17_reg_159.read());
}

void backsub_hls_fptoui_float_i8::thread_isNeg_fu_72_p3() {
    isNeg_fu_72_p3 = sh_assign_fu_66_p2.read().range(8, 8);
}

void backsub_hls_fptoui_float_i8::thread_loc_V_1_fu_46_p1() {
    loc_V_1_fu_46_p1 = p_Val2_s_fu_32_p1.read().range(23-1, 0);
}

void backsub_hls_fptoui_float_i8::thread_loc_V_fu_36_p4() {
    loc_V_fu_36_p4 = p_Val2_s_fu_32_p1.read().range(30, 23);
}

void backsub_hls_fptoui_float_i8::thread_p_Result_s_fu_50_p3() {
    p_Result_s_fu_50_p3 = esl_concat<1,23>(ap_const_lv1_1, loc_V_1_fu_46_p1.read());
}

void backsub_hls_fptoui_float_i8::thread_p_Val2_s_fu_32_p1() {
    p_Val2_s_fu_32_p1 = x.read();
}

void backsub_hls_fptoui_float_i8::thread_sh_assign_1_cast_cast_fu_102_p1() {
    sh_assign_1_cast_cast_fu_102_p1 = esl_sext<24,9>(sh_assign_1_fu_90_p3.read());
}

void backsub_hls_fptoui_float_i8::thread_sh_assign_1_cast_fu_98_p1() {
    sh_assign_1_cast_fu_98_p1 = esl_sext<32,9>(sh_assign_1_fu_90_p3.read());
}

void backsub_hls_fptoui_float_i8::thread_sh_assign_1_fu_90_p3() {
    sh_assign_1_fu_90_p3 = (!isNeg_fu_72_p3.read()[0].is_01())? sc_lv<9>(): ((isNeg_fu_72_p3.read()[0].to_bool())? tmp_i_cast_fu_86_p1.read(): sh_assign_fu_66_p2.read());
}

void backsub_hls_fptoui_float_i8::thread_sh_assign_fu_66_p2() {
    sh_assign_fu_66_p2 = (!ap_const_lv9_181.is_01() || !tmp_i_i_cast1_fu_62_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(ap_const_lv9_181) + sc_biguint<9>(tmp_i_i_cast1_fu_62_p1.read()));
}

void backsub_hls_fptoui_float_i8::thread_tmp_1_i_fu_106_p1() {
    tmp_1_i_fu_106_p1 = esl_zext<54,32>(sh_assign_1_cast_fu_98_p1.read());
}

void backsub_hls_fptoui_float_i8::thread_tmp_2_i_fu_110_p2() {
    tmp_2_i_fu_110_p2 = (!sh_assign_1_cast_cast_fu_102_p1.read().is_01())? sc_lv<24>(): p_Result_s_fu_50_p3.read() >> (unsigned short)sh_assign_1_cast_cast_fu_102_p1.read().to_uint();
}

void backsub_hls_fptoui_float_i8::thread_tmp_4_i_fu_116_p2() {
    tmp_4_i_fu_116_p2 = (!tmp_1_i_fu_106_p1.read().is_01())? sc_lv<54>(): tmp_8_i_fu_58_p1.read() << (unsigned short)tmp_1_i_fu_106_p1.read().to_uint();
}

void backsub_hls_fptoui_float_i8::thread_tmp_8_i_fu_58_p1() {
    tmp_8_i_fu_58_p1 = esl_zext<54,24>(p_Result_s_fu_50_p3.read());
}

void backsub_hls_fptoui_float_i8::thread_tmp_fu_140_p1() {
    tmp_fu_140_p1 = esl_zext<8,1>(tmp_109_reg_154.read());
}

void backsub_hls_fptoui_float_i8::thread_tmp_i_cast_fu_86_p1() {
    tmp_i_cast_fu_86_p1 = esl_sext<9,8>(tmp_i_fu_80_p2.read());
}

void backsub_hls_fptoui_float_i8::thread_tmp_i_fu_80_p2() {
    tmp_i_fu_80_p2 = (!ap_const_lv8_7F.is_01() || !loc_V_fu_36_p4.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_7F) - sc_biguint<8>(loc_V_fu_36_p4.read()));
}

void backsub_hls_fptoui_float_i8::thread_tmp_i_i_cast1_fu_62_p1() {
    tmp_i_i_cast1_fu_62_p1 = esl_zext<9,8>(loc_V_fu_36_p4.read());
}

}

